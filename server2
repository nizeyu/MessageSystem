//shuo zhang
#include <stdio.h>
#include <winsock2.h>
#include <iostream>
#pragma warning(disable:4996)
#pragma comment (lib, "ws2_32.lib")  //load ws2_32.dll

#define BUF_SIZE 100

//创建线程
DWORD WINAPI ClientThread(LPVOID ipParameter)
{
	SOCKET ClientScoket = (SOCKET)ipParameter;
	int RET = 0;
	char RecvBuffer[MAX_PATH];
	//初始化 recvBuffer 
	while (true) {
		memset(RecvBuffer, 0x00, sizeof(RecvBuffer));
		RET = recv(ClientScoket, RecvBuffer, MAX_PATH, 0);
		if (RET == 0 || RET == SOCKET_ERROR)
		{
			printf("failed,exit %s\n");
			break;
		}
		printf("Message form client: %s\n", RecvBuffer);
    printf("Input a string: ");
	gets_s(RecvBuffer);
	send(ClientScoket, RecvBuffer, MAX_PATH, 0);  //send data to client
	memset(RecvBuffer, 0, BUF_SIZE);  //reset buffer area
	}
	return 0;
}

int main() {
	WSADATA wsaData;

	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		printf("Winsock load failed\n");
		return 0;
	}
	//create socket
	SOCKET        servSock, sAccept;
	servSock = socket(AF_INET, SOCK_STREAM, 0);
	if (servSock == INVALID_SOCKET)
	{
		printf("socket failed:%d\n", WSAGetLastError());
		return 0;
	}
	//bind socket
	sockaddr_in sockAddr;
	memset(&sockAddr, 0, sizeof(sockAddr)); 
		sockAddr.sin_family = AF_INET;  //using ipv4 adress
	sockAddr.sin_addr.s_addr = INADDR_ANY;
	sockAddr.sin_port = htons(5000);  //set the port
	if (bind(servSock, (SOCKADDR*)&sockAddr, sizeof(SOCKADDR)) == SOCKET_ERROR)
	{
		printf("bind()failed:%d\n", WSAGetLastError());
		return 0;
	}
	//begin listening
	if (listen(servSock, 20) == SOCKET_ERROR)
	{
		printf("listen()failed:%d\n", WSAGetLastError());
		return 0;
	}//listen and judge weather it can work
	 //revieve the request from client
	SOCKADDR clntAddr;
	int nSize = sizeof(SOCKADDR);
	char buffer[BUF_SIZE] = { 0 };  //creat buffer area
	while (1) {
		sAccept = accept(servSock, (SOCKADDR*)&clntAddr, &nSize);
		if (sAccept == INVALID_SOCKET)
		{
			printf("accept()failed:%d\n", WSAGetLastError());
			break;
		}
		printf("accepted client IP:[%s],port:[%d]\n", inet_ntoa(sockAddr.sin_addr), ntohs(sockAddr.sin_port));
		HANDLE WINAPI hThread = CreateThread(NULL, 0, ClientThread, (LPVOID)sAccept, 0, NULL);
		if (hThread == NULL)
		{
			printf( "creat thread failed%s\n" );
			break;
		}
		CloseHandle(hThread);
	}
	closesocket(sAccept);
	WSACleanup();
	return 0;
}
		
	


